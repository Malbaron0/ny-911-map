{"version":3,"sources":["resources/Utils.js","resources/NYCOpenData.js","components/Markers.js","components/LeafletMap.js","components/Loading.js","components/Navbar.js","components/App.js","serviceWorker.js","index.js"],"names":["mergeArrays","arr1","arr2","arr","concat","filter","item","index","inputArray","indexOf","NYCOpenData","historicalDataURL","yearToDateDataURL","nycData","url","fetch","headers","X-App-Token","then","response","json","getYearsAndCrimeTypes","categories","map","data","reduce","accumlator","current","year","Date","cmplnt_fr_dt","getFullYear","undefined","includes","law_cat_cd","push","Number","isNaN","crimeTypes","years","getByYear","crime","stringDate","getUTCFullYear","toString","getByCrime","crimeName","getByBorough","borough","boro_nm","getMultiple","selectedCategoryValues","yearValues","Array","isArray","length","crimeByYear","crimeValues","crimeByType","boroughValues","moment","require","Markers","MarkerCollection","obj","Object","keys","constructor","react_default","a","createElement","Marker","position","Popup","filtered","_this","createMarkers","markerData","markers","hasOwnProperty","crimePosition","latitude","longitude","crimeTime","cmplnt_to_tm","format","crimeDate","ofns_desc","this","props","Component","LeafletMap","defaultPosition","lat","lng","zoom","fixLeafletMarker","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","Map","className","center","TileLayer","attribution","components_Markers","Loading","class","Navbar","searchCriteria","handleChangeCrime","e","console","log","getValues","handleChangeYear","handleChangeBorough","array","elemet","value","handleSubmit","event","preventDefault","updateCategoryValues","options","crimeType","label","react_select_esm","onChange","isMulti","yearTypes","sort","boroughTypes","choiceItems","categoryValues","Fragment","data-toggle","data-target","onClick","type","aria-controls","aria-expanded","aria-label","id","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","state","loading","crimeData","error","_this2","Promise","all","catch","components_Loading","components_Navbar","components_LeafletMap","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67d5a9f5.chunk.js","sourcesContent":["export function isObjectEmpty (obj) {\r\n   return Object.keys(obj).length === 0 && obj.constructor === Object\r\n}\r\n\r\nexport function mergeArrays(arr1, arr2) {\r\n   var arr = arr1.concat(arr2);\r\n   arr = arr.filter(function (item, index, inputArray) {\r\n     return inputArray.indexOf(item) === index;\r\n   });\r\n   return arr;\r\n }","import {mergeArrays} from '../resources/Utils';\r\n//fetch\r\nlet NYCOpenData = {\r\n\r\n    historicalDataURL: 'https://data.cityofnewyork.us/resource/9s4h-37hy.json',\r\n    yearToDateDataURL: 'https://data.cityofnewyork.us/resource/7x9x-zpz6.json',\r\n    \r\n    nycData: (url) => {\r\n        return fetch(url, {\r\n            headers: {\r\n                'X-App-Token': 'VxVfB1l051bDWPhFmrm2QeX9a'\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n    },\r\n\r\n    /*Iterate over passed in data and get all the possible values for years and crime types.\r\n    Those values are then displayed to the user as possible filter options for the data. \r\n    */\r\n    getYearsAndCrimeTypes: (nycData) => {\r\n        let categories = nycData.map(data => {\r\n            \r\n            let result = data.reduce((accumlator, current) => {\r\n    \r\n                let year = new Date(current.cmplnt_fr_dt).getFullYear();\r\n    \r\n                if (accumlator[\"crimeTypes\"] === undefined && accumlator[\"years\"] === undefined) {\r\n                    accumlator[\"crimeTypes\"] = [];\r\n                    accumlator[\"years\"] = [];\r\n                }\r\n                if (!accumlator[\"crimeTypes\"].includes(current.law_cat_cd)) {\r\n                    if (current.law_cat_cd !== undefined) {\r\n                        accumlator[\"crimeTypes\"].push(current.law_cat_cd);\r\n                    }\r\n                }\r\n                if (!accumlator[\"years\"].includes(year)) {\r\n                    if (!Number.isNaN(year)) {\r\n                        accumlator[\"years\"].push(year);\r\n                    }\r\n                }\r\n    \r\n                return accumlator;\r\n            }, {})\r\n    \r\n            return result;\r\n        })\r\n\r\n        \r\n        \r\n\r\n        return {\r\n            crimeTypes: mergeArrays(categories[0].crimeTypes, categories[1].crimeTypes),\r\n            years: mergeArrays(categories[0].years, categories[1].years)\r\n        }\r\n    },\r\n    \r\n    getByYear: (nycData, year) => {\r\n        return nycData.filter(crime => {\r\n            let stringDate = new Date(crime.cmplnt_fr_dt).getUTCFullYear().toString();\r\n            if(year.includes(stringDate)){\r\n                return true;\r\n            }\r\n        })\r\n    },\r\n\r\n    getByCrime: (nycData, crimeName) => {\r\n        return nycData.filter( crime => {\r\n            if(crimeName.includes(crime.law_cat_cd))\r\n                return true;\r\n        })\r\n    },\r\n\r\n    getByBorough: (nycData, borough) => {\r\n        return nycData.filter(crime => {\r\n            if(borough.includes(crime.boro_nm)){\r\n                return true;\r\n            }\r\n        })\r\n    },\r\n\r\n    getMultiple: (nycData, selectedCategoryValues) => {\r\n        let results = \r\n        /*filter through the data. Return all the data based on the users chosen values.\r\n        //if user doesnt specify a filter criteria (year, borough, crimetype) then its assumed all data should used \r\n        for that category.*/\r\n        nycData.filter(crime => {\r\n            let stringDate = new Date(crime.cmplnt_fr_dt).getUTCFullYear().toString();\r\n            if(selectedCategoryValues.yearValues.includes(stringDate)){\r\n                return true;\r\n            }\r\n            if (!Array.isArray(selectedCategoryValues.yearValues) || !selectedCategoryValues.yearValues.length) {\r\n                return true;\r\n            }\r\n        })\r\n        .filter(crimeByYear => {\r\n            if(selectedCategoryValues.crimeValues.includes(crimeByYear.law_cat_cd)){\r\n                return true;\r\n            }\r\n            if (!Array.isArray(selectedCategoryValues.crimeValues) || !selectedCategoryValues.crimeValues.length) {\r\n                return true;\r\n            }\r\n        })\r\n        .filter(crimeByType => {\r\n            if(selectedCategoryValues.boroughValues.includes(crimeByType.boro_nm)){\r\n                return true;\r\n            }\r\n            if (!Array.isArray(selectedCategoryValues.boroughValues) || !selectedCategoryValues.boroughValues.length) {\r\n                return true;\r\n            }\r\n        })\r\n        return results;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default NYCOpenData;\r\n/*\r\nCreate filter functions\r\n//get by year\r\n//get by offense\r\n//get by borough\r\n//make multiple selection\r\n*/","import React, { Component } from 'react';\r\nimport { Marker, Popup } from 'react-leaflet';\r\nimport { isObjectEmpty } from '../resources/Utils';\r\nimport NYCOpenData from '../resources/NYCOpenData';\r\nvar moment = require('moment');\r\nclass Markers extends Component {\r\n\r\n    MarkerCollection = (nycData, selectedCategoryValues) => {\r\n        if (isObjectEmpty(selectedCategoryValues)) {\r\n            return (<Marker position={[40.7128, -74.0060]}>\r\n                <Popup>Search for crimes through the search filter above.</Popup>\r\n            </Marker>)\r\n        }\r\n        else {\r\n            let filtered = NYCOpenData.getMultiple(nycData,\r\n                selectedCategoryValues);\r\n\r\n            let markersArray = this.createMarkers(filtered);\r\n\r\n\r\n            return markersArray;\r\n        }\r\n    }\r\n\r\n    createMarkers = (markerData) => {\r\n        return markerData.reduce((markers, crime) => {\r\n            //if check to see if crime has latitude. Apparently some of the data doesnt contain location.\r\n            if (crime.hasOwnProperty('latitude')) {\r\n                let crimePosition = [crime.latitude, crime.longitude];\r\n                let crimeTime = moment(crime.cmplnt_to_tm, 'HH:mm:ss').format('h:mm A');\r\n                let crimeDate = moment(crime.cmplnt_fr_dt).format('MMMM Do YYYY');\r\n                markers.push(\r\n                    <Marker position={crimePosition}>\r\n                        <Popup>\r\n                            <div>Offense Description : {crime.ofns_desc}</div>\r\n                            <div>Offense Date: {crimeDate}</div>\r\n                            <div>Offense Time: {crimeTime}</div>\r\n                        </Popup>\r\n                    </Marker>\r\n                )\r\n            }\r\n            return markers;\r\n        }, [])\r\n    }\r\n\r\n    render() {\r\n        return this.MarkerCollection(this.props.data, this.props.selectedCategoryValues);\r\n    }\r\n}\r\n\r\nexport default Markers;\r\n\r\n","import React, { Component } from 'react';\r\nimport Markers from './Markers';\r\nimport { Map, TileLayer} from 'react-leaflet';\r\nimport L from 'leaflet';\r\n\r\nclass LeafletMap extends Component {\r\n\r\n  //longitude and latitude of new york\r\n  defaultPosition = {\r\n    lat: 40.730610,\r\n    lng: -73.935242,\r\n    zoom: 10,\r\n  }\r\n\r\n  /*Issues with using icons in react-leaflt. \r\n    Changing the path of icons in the leaflet library to appropriate path (According to the github issue)\r\n  https://github.com/PaulLeCam/react-leaflet/issues/453#issuecomment-410450387\r\n  */\r\n  fixLeafletMarker = () => {\r\n    delete L.Icon.Default.prototype._getIconUrl;\r\n\r\n    L.Icon.Default.mergeOptions({\r\n      iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n      iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n      shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const position = [this.defaultPosition.lat, this.defaultPosition.lng]\r\n    this.fixLeafletMarker();\r\n\r\n    return (\r\n      <Map className=\"map\" center={position} zoom={this.defaultPosition.zoom}>\r\n        <TileLayer\r\n          attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n          url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\"\r\n        />\r\n        <Markers data = {this.props.data} selectedCategoryValues = {this.props.selectedCategoryValues}></Markers>\r\n      </Map>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LeafletMap;","import React, { Component } from 'react';\r\n\r\nclass Loading extends Component {\r\n    render() {\r\n        return (\r\n            <div class=\"spinner\">   \r\n                <div class=\"double-bounce1\"></div>\r\n                <div class=\"double-bounce2\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loading;\r\n\r\n","import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport shortid from 'shortid';\r\n\r\n//TODO: Add ability to choose multiple values \r\nclass Navbar extends Component {\r\n    \r\n    searchCriteria = {\r\n        crimeValues: [],\r\n        yearValues: [],\r\n        boroughValues: []\r\n    }\r\n\r\n    handleChangeCrime = (e) => {\r\n        console.log(e);\r\n        this.searchCriteria.crimeValues = this.getValues(e);\r\n\r\n\r\n    }\r\n\r\n    handleChangeYear = (e) => {\r\n        console.log(this.getValues(e));\r\n        this.searchCriteria.yearValues = this.getValues(e);\r\n    }\r\n\r\n    handleChangeBorough = (e) => {\r\n        console.log(e);\r\n        this.searchCriteria.boroughValues = this.getValues(e);\r\n    }\r\n\r\n    getValues = (array) => {\r\n        return array.map(elemet => elemet.value);\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        this.props.updateCategoryValues(this.searchCriteria);\r\n    }\r\n\r\n    crimeTypes = (crimeTypes) => {\r\n        let options = crimeTypes.map(crimeType => {\r\n            return { value: `${crimeType}`, label: `${crimeType}` }\r\n        });\r\n        return (\r\n            <Select\r\n                onChange={this.handleChangeCrime}\r\n                isMulti\r\n                className=\"basic-multi-select\"\r\n                options={options} />\r\n        );\r\n    }\r\n\r\n    yearTypes = (years) => {\r\n        let sortedYears = years.sort();\r\n        let options = sortedYears.filter(year => year)\r\n            .map(year => {\r\n                return {\r\n                    value: `${year}`,\r\n                    label: `${year}`\r\n                }\r\n            });\r\n\r\n        return (\r\n            <Select isMulti\r\n                className=\"basic-multi-select\"\r\n                onChange={this.handleChangeYear}\r\n                options={options}>\r\n\r\n            </Select>\r\n        )\r\n    }\r\n\r\n    boroughTypes = () => {\r\n        let options = [\r\n            { value: \"BROOKLYN\", label: 'Brooklyn' },\r\n            { value: \"QUEENS\", label: 'Queens' },\r\n            { value: \"BRONX\", label: 'Bronx' },\r\n            { value: \"MANHATTAN\", label: 'Manhattan' }\r\n        ];\r\n\r\n        return (\r\n            <Select isMulti\r\n                className=\"basic-multi-select\"\r\n                onChange={this.handleChangeBorough}\r\n                options={options}>\r\n\r\n            </Select>\r\n        )\r\n\r\n    }\r\n\r\n\r\n    choiceItems = (categoryValues) => {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"category-selects nav-item\">\r\n                    {this.yearTypes(categoryValues[\"years\"])}\r\n                    {this.crimeTypes(categoryValues[\"crimeTypes\"])}\r\n                    {this.boroughTypes()}\r\n                </div>\r\n                <div className=\"input-group-append\">\r\n                    <button data-toggle=\"collapse\" data-target=\".navbar-collapse.show\" className=\"btn btn-outline-secondary\" onClick={this.handleSubmit} type=\"button\">Submit</button>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <nav className=\"sideBar navbar fixed-top navbar-dark bg-dark\">\r\n                <div className=\"navbar-brand\">NYC Crime Map</div>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\r\n                    {this.choiceItems(this.props.categoryValues)}\r\n                </div>\r\n\r\n            </nav>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","import React, {\r\n  Component\r\n} from 'react';\r\nimport LeafletMap from './LeafletMap';\r\nimport NYCOpenData from '../resources/NYCOpenData';\r\nimport Loading from './Loading';\r\nimport Navbar from './Navbar';\r\nimport {mergeArrays} from '../resources/Utils';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      crimeData: [], \r\n      categoryValues: {}, //array to hold values for the year and crime type dropdown\r\n      selectedCategoryValues: {}, //state used to store user's selected filter options for the data\r\n      error: \"\"\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      loading: true\r\n    });\r\n\r\n    //Promise chain to 2 API's\r\n    Promise.all([NYCOpenData.nycData(NYCOpenData.historicalDataURL), \r\n      NYCOpenData.nycData(NYCOpenData.yearToDateDataURL)])\r\n      .then(data => {\r\n        this.setState({\r\n          crimeData: mergeArrays(data[0], data[1]), //merge the data (the historic and year to date data)\r\n          categoryValues: NYCOpenData.getYearsAndCrimeTypes(data)\r\n        });\r\n      })\r\n      .then(data => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          loading: false,\r\n          error\r\n        })\r\n      });\r\n  }\r\n\r\n  \r\n  updateCategoryValues = (selectedCategoryValues) => {\r\n    this.setState({selectedCategoryValues})\r\n    console.log(selectedCategoryValues);\r\n  }\r\n\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <Loading />\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <div className=\"parent-container\">\r\n          <Navbar \r\n                  updateCategoryValues = {this.updateCategoryValues} categoryValues = {this.state.categoryValues}></Navbar>\r\n          <LeafletMap selectedCategoryValues = {this.state.selectedCategoryValues} data = {this.state.crimeData} />\r\n          </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/style.css';\nimport 'leaflet/dist/leaflet.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}